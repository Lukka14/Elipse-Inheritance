#include <iostream>
#include <cmath>
using namespace std;
class Elipse{
    // ელიფსს ორი ცვლადი სჭირდება - სიგრძე და სიგანე, წრეწირს კი მხოლოდ ერთი (რადიუსი)
    // ამიტომ ერთი ცვლადი იქნება პირადი მეორე კი დაცული
    // რათა მემკვიდრე კლასიდან ერთ-ერთ ცვლადზე შეგვეძლოს წვდომა (ამ შემთხვევაში B-ზე)
	private:
		double A;
	protected:
		double B;
	public:
    // კონსტრუქტორი, ფუნქციისგან განსხვავებით ის ავტომატურად ამოქმედდება ამ
    // კლასის ტიპის ცვლადის შემოღებისთანავე და პასუხისმგებელია ცვლადებისათვის მნიშვნელობის მინიჭებაზე!
		Elipse(double A=0,double B=0){
            // ვინაიდან კონსტრუქტორის პარამეტრებს და მე-9 და მე-11 ხაზებზე შემოღებულ 
            // ცვლადებს ერთნაირი სახელები აქვთ, კომპილატორმა ისინი ერთმანეთისგან უნდა გაარჩიოს,
            // ამიტომ ვიყენებთ ახალ აღნიშვნას "this->" რაც მიუთითებს, რომ ეს ცვლადი არა პარამეტრებიდან მიღებული, არამედ
            // ზემოთ აღნიშნული (მე-9 და მე-11 ხაზებზე) დაცული მონაცემებია.
            // "this->A" - მიუთითებს მე-9 ხაზზე შემოღებულ "double A"-ზე
            // ხოლო A (this-ის გარეშე) არის კონსტრუქტორის პარამეტრებიდან მიღებული ცვლადი
			this->A=A;
			this->B=B;
		}
        // წრეწირის ფართობის გამოსათვლელი ფუნქცია 
		double S(){
			return M_PI*A*B;
		}
        // კლასის შიგნით friend ოპერატორით აღნიშნულ ფუნქციას ეძლევა შესაძლებლობა
        // კლასის გარედან იქონიოს წვდომა კლასის დაცულ მონაცემებზე (ამ შემთხვევაში A-ზე და B-ზე) 
		friend Elipse getFromKeyboardElipse(double a,double b);
};
// მონაცემების კლავიატურიდან შეყვანისთვის განკუთვნილი ფუნქცია.
// ფუნქცია ჩვენს მიერ შექმნილი კლასის ტიპისაა, რათა ამავე ტიპის მნიშვნელობა დააბრუნოს
Elipse getFromKeyboardElipse(double a=0,double b=0){
    // დროებითი ცვლადი, ხშირად ვარქმევთ tmp-ს (temporary)
    // ვიყენებთ მონაცემების დროებით შესანახად, რათა მონაცემები return ით უკან დავაბრუნოთ
	Elipse tmp;
	if(a==0){
		cout<<"a="; cin>>a;
	}
	if(b==0){
		cout<<"b="; cin>>b;
	}
	tmp.A=fabs(a);
	tmp.B=fabs(b);
    // return ით შეყვანილ მონაცემებს უკან გადავცემთ
    // ამ ფუნქციის მთავარი დანიშნულებაც ესაა
	return tmp;
}
// წრეწირის კლასი
// public Elipse - ნიშნავს რომ Elipse კლასიდან მივიღებთ ყველა საჯარო (public) და 
// დაცულ (protected) მონაცემებს (ფუნქციებსაც) და მათ საჯაროდ (public) შევინახავთ.
// ასე ჩვენ შეგვეძელბა ამ კლასსი გამოვიყენოთ ყველა Elipse კლასსი არსებული ფუნქცია თუ მონაცემი.
class Circle: public Elipse{
	public:
    // ეს არის კონსტრუქტორი.
    // ვინაიდან წრეწირში სიგრძე და სიგანე ერთმანეთის ტოლია მხოლოდ ერთი ცვლადი, რადიუსი გვჭირდება
    // ამიტომ სიგრძესა და სიგანეს გავუტოლებთ ერთმანეთს და ამ ცვლადს Elipse კლასს გადავცემთ.
    // "Circle(double B=0)" - არის ამ კლასის კონსტრუქტორი იმავე პრინციპით შედგენილი როგორც Elipse კლასში
    // "Elipse(fabs(B),fabs(B)" - არის Elipse კლასის კონსტრუქტორი, რომელსაც მონაცემებს გადავცემთ, რადგან
    // A არის Eclipse კლასის პირადი ცვლადი და მასზე წვდომა პირდაპირ არ გაგვაჩნია ამიტომ მისსავე კონსტრუქტორს გადავცემთ
    // მონაცემებს და მნიშვნელობებს ის მიანიჭებს.
    // მოკლედ რომ ვთქვათ პირველი "Circle(double B=0)" კონსტრუქტორი მიიღებს B-ს და გადასცემს მეორე Eclipse კლასის 
    // კონსტრუქტორს - "Elipse(fabs(B),fabs(B))"
		Circle(double B=0):Elipse(fabs(B),fabs(B)){
		}
    // ვიმეორებთ 31-ე ხაზის მსგავს კოდს, რათა კლასის გარედან ფუნქციას დაცულ მონაცემებზე წვდომა შეეძლოს
	friend Circle getFromKeyboardCircle(double r);
};
// იგივე კლავიატურიდან მონაცემების შესაყვანი ფუნქცია ამჯერად Circle კლასისთვის
// შეგვყავს მხოლოდ ერთი მონაცემი (r - რადიუსი)
Circle getFromKeyboardCircle(double r=0){
	if(r==0){
		cout<<"r="; cin>>r;
	}
	r=fabs(r);
    // შემოვიღებთ ახალ, ამავე კლასის ცვლადს
    // Circle(r) - გამოიძახებს ამავე Circle კლასის კონსტრუქტორს და r-ის მნიშვნელობას გადასცემს.
	Circle tmp=Circle(r);
	tmp.B=r;
	return tmp;
}
int main(int argc,char** argv) {
    // შემოვიღებთ ახალ ცვლადს, თუ ელიფსის ფართობის გამოთვლა გვინდა, მაშინ Elipse m და თავისი 
    // მონაცემების კლავიატურიდან შესაყვანი ფუნქციით - getFromKeyboardElipse()
    // (m პირობითი სახელია, პირველად რაც მომაფიქრდა და შეიძლება მის ნაცვლად ნებისმიერი სხვა სახელი ეწეროს.)
    // თუ წრეწირის ფართობის გამოთვლა გვინდა, მაშინ Circle m თავისი - getFromKeyboardCircle() ფუნქციით
	Elipse m=getFromKeyboardElipse();
	cout<<m.S();
	return 0;
}